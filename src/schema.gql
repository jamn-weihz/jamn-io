# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Col {
  createDate: DateTime!
  deleteDate: DateTime
  i: Int!
  id: String!
  pathname: String!
  updateDate: DateTime!
  user: User!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Jam {
  color: String!
  createDate: DateTime!
  deleteDate: DateTime
  description: String!
  focus: Post!
  focusId: String
  id: String!
  isClosed: Boolean!
  isPrivate: Boolean!
  lat: Float!
  lng: Float!
  lowercaseName: String!
  name: String!
  postI: Int!
  roles: [Role!]!
  updateDate: DateTime!
}

type Link {
  clicks: Int!
  createDate: DateTime!
  deleteDate: DateTime
  id: String!
  sourcePost: Post!
  sourcePostId: String!
  targetPost: Post!
  targetPostId: String!
  tokens: Int!
  updateDate: DateTime!
  voteI: Int!
  votes: [Vote!]!
  weight: Int!
}

type Mutation {
  addCol(pathname: String!): Col!
  getNext(offset: Int!, postId: String!): [Link!]!
  getPosts(postIds: [String!]!): [Post!]!
  getPrev(offset: Int!, postId: String!): [Link!]!
  inviteRole(jamId: String!, sessionId: String!, userName: String!): Role!
  linkPosts(sessionId: String!, sourcePostId: String!, targetPostId: String!): Link!
  loginGoogleUser(pathnames: [String!]!, token: String!): User!
  loginUser(email: String!, pass: String!): User!
  logoutUser: User!
  refreshToken: User!
  registerUser(email: String!, pass: String!, pathnames: [String!]!): User!
  removeCol(colId: String!): [Col!]!
  removeRole(roleId: String!, sessionId: String!): Role!
  replyPost(jamId: String, sessionId: String!, sourcePostId: String!): Link!
  requestRole(jamId: String!, sessionId: String!): Role!
  resendUserVerification: User!
  saveCol(colId: String!, pathname: String!): Col!
  savePost(draft: String!, postId: String!, sessionId: String!): Post!
  setJamColor(color: String!, jamId: String!, sessionId: String!): Jam!
  setJamIsClosed(isClosed: Boolean!, jamId: String!, sessionId: String!): Jam!
  setJamIsPrivate(isPrivate: Boolean!, jamId: String!, sessionId: String!): Jam!
  setUserColor(color: String!): User!
  setUserName(name: String!): User!
  shiftCol(colId: String!, di: Int!): [Col!]!
  startJam(desc: String!, lat: Float!, lng: Float!, name: String!): Jam!
  updateUserMap(lat: Float!, lng: Float!, zoom: Float!): User!
  verifyUser(code: String!): User!
  votePosts(clicks: Int!, linkId: String!, sessionId: String!): Link!
}

type Post {
  clicks: Int!
  commitDate: DateTime
  createDate: DateTime!
  deleteDate: DateTime
  description: String!
  draft: String!
  id: String!
  inLinks: [Link!]!
  isOpaque: Boolean
  jam: Jam
  jamI: Int
  jamId: String
  name: String!
  nextCount: Int!
  outLinks: [Link!]!
  prevCount: Int!
  privacy: String!
  saveDate: DateTime!
  tokens: Int!
  updateDate: DateTime!
  user: User!
  userI: Int!
  userId: String!
  weight: Int!
}

type Query {
  getJamByName(name: String!): Jam
  getJamsByLocation(lat: Float!, lng: Float!, zoom: Float!): [Jam!]!
  getUser: User!
  getUserByEmail(email: String!): User
  getUserByName(name: String!): User
}

type Role {
  createDate: DateTime!
  deleteDate: DateTime
  id: String!
  isInvited: Boolean!
  isRequested: Boolean!
  jam: Jam!
  jamId: String!
  type: String!
  updateDate: DateTime!
  user: User!
  userId: String!
}

type Subscription {
  jamRole(jamId: String!, sessionId: String!): Role!
  linkPosts(postIds: [String!]!, sessionId: String!): Link!
  savePost(cardIds: [String!]!, sessionId: String!): Post!
  setJam(jamId: String!, sessionId: String!): Jam!
  startJam: Jam!
  userRole(sessionId: String!, userId: String!): Role!
}

type User {
  color: String!
  cols: [Col!]!
  createDate: DateTime!
  deleteDate: DateTime
  description: String!
  email: String
  focus: Post!
  focusId: String
  id: String!
  isAdmin: Boolean!
  isRegisteredWithGoogle: Boolean!
  lat: Float
  lng: Float
  lowercaseName: String!
  mapLat: Float
  mapLng: Float
  mapZoom: Float
  name: String!
  postI: Int!
  roles: [Role!]!
  updateDate: DateTime!
  verifyEmailDate: DateTime
  voteI: Int!
  zoom: Float
}

type Vote {
  clicks: Int!
  createDate: DateTime!
  deleteDate: DateTime
  id: String!
  link: Link!
  linkI: Float!
  linkId: String!
  sourcePost: Post!
  sourcePostId: String!
  targetPost: Post!
  targetPostId: String!
  tokens: Int!
  user: User!
  userI: Int!
  userId: String!
  weight: Int!
}